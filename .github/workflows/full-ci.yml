# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Full CI workflow
# Runs before merging. Rebases on master to make sure CI passes for latest integration, not only for the PR at the time of creation.

name: Full CI

on:
  push:
    branches:
      - staging
      - trying

env:
  GDEXT_FEATURES: ''

  # LSan options: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  # * report_objects: list individual leaked objects when running LeakSanitizer
  LSAN_OPTIONS: report_objects=1

  # ASan options: https://github.com/google/sanitizers/wiki/AddressSanitizerFlags

defaults:
  run:
    shell: bash

# If a new commit is pushed before the old one's CI has completed (on the same branch), abort previous run
#concurrency:
#  group: ${{ github.head_ref }}
#  cancel-in-progress: true

jobs:
  rustfmt:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          components: rustfmt

      - name: "Check rustfmt"
        run: cargo fmt --all -- --check


  clippy:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          components: clippy

      - name: "Check clippy"
        run: |
          cargo clippy --all-targets $GDEXT_FEATURES ${{ matrix.rust-extra-args }} -- \
          -D clippy::suspicious -D clippy::style -D clippy::complexity -D clippy::perf \
          -D clippy::dbg_macro -D clippy::todo -D clippy::unimplemented -D warnings 

  unit-test:
    name: unit-test (${{ matrix.name }}${{ matrix.rust-special }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          - name: macos
            os: macos-11

          - name: windows
            os: windows-latest

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux
            os: ubuntu-20.04

          - name: linux
            os: ubuntu-20.04
            rust-toolchain: nightly
            rust-special: -minimal-deps
            rust-cache-key: minimal-deps

          - name: linux
            os: ubuntu-20.04
            rust-toolchain: '1.66.0'
            rust-special: -msrv

    steps:
      - uses: actions/checkout@v3

      - name: "Install Rust"
        uses: ./.github/composite/rust
        with:
          rust: ${{ matrix.rust-toolchain || 'stable' }}
          cache-key: ${{ matrix.rust-cache-key }} # only needed when rustc version is possibly the same

      - name: "Install minimal dependency versions from Cargo"
        if: matrix.rust-special == '-minimal-deps'
        run: cargo +nightly update -Z minimal-versions

      - name: "Compile tests"
        run: cargo test $GDEXT_FEATURES --no-run ${{ matrix.rust-extra-args }}

      - name: "Test"
        run: cargo test $GDEXT_FEATURES ${{ matrix.rust-extra-args }}


  godot-itest:
    name: godot-itest (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    timeout-minutes: 24
    strategy:
      fail-fast: false # cancel all jobs as soon as one fails?
      matrix:
        # Order this way because macOS typically has the longest duration, followed by Windows, so it benefits total workflow execution time.
        # Additionally, the 'linux (msrv *)' special case will then be listed next to the other 'linux' jobs.
        # Note: Windows uses '--target x86_64-pc-windows-msvc' by default as Cargo argument.
        include:
          # macOS

          - name: macos-4.0.3
            os: macos-12
            artifact-name: macos
            godot-binary: godot.macos.editor.dev.x86_64
            godot-prebuilt-patch: '4.0.3'

          - name: macos-double
            os: macos-12
            godot-binary: godot.macos.editor.dev.double.x86_64
            rust-extra-args: --features godot/double-precision

          - name: macos-nightly
            os: macos-12
            artifact-name: macos
            godot-binary: godot.macos.editor.dev.x86_64
            rust-extra-args: --features godot/custom-godot
            with-llvm: true
            godot-prebuilt-patch: '4.1'

          # Windows

          - name: windows-4.0.3
            os: windows-latest
            artifact-name: windows
            godot-binary: godot.windows.editor.dev.x86_64.exe
            godot-prebuilt-patch: '4.0.3'

          - name: windows-double
            os: windows-latest
            godot-binary: godot.windows.editor.dev.double.x86_64.exe
            rust-extra-args: --features godot/double-precision

          - name: windows-nightly
            os: windows-latest
            artifact-name: windows
            godot-binary: godot.windows.editor.dev.x86_64.exe
            rust-extra-args: --features godot/custom-godot
            godot-prebuilt-patch: '4.1'

          # Linux

          # Don't use latest Ubuntu (22.04) as it breaks lots of ecosystem compatibility.
          # If ever moving to ubuntu-latest, need to manually install libtinfo5 for LLVM.
          - name: linux-4.0.3
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            godot-check-header: false # disabled for now

          - name: linux-4.0.2
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            godot-prebuilt-patch: '4.0.2'

          - name: linux-4.0.1
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            godot-prebuilt-patch: '4.0.1'

          - name: linux-4.0
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            godot-prebuilt-patch: '4.0'

          - name: linux-double
            os: ubuntu-20.04
            godot-binary: godot.linuxbsd.editor.dev.double.x86_64
            rust-extra-args: --features godot/double-precision

          - name: linux-features
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features godot/threads,godot/serde

          - name: linux-nightly
            os: ubuntu-20.04
            artifact-name: linux
            godot-binary: godot.linuxbsd.editor.dev.x86_64
            rust-extra-args: --features godot/custom-godot
            godot-prebuilt-patch: '4.1'

          # Special Godot binaries compiled with AddressSanitizer/LeakSanitizer to detect UB/leaks.
          # Additionally, the Godot source is patched to make dlclose() a no-op, as unloading dynamic libraries loses stacktrace and
          # cause false positives like println!. See https://github.com/google/sanitizers/issues/89.
          # The gcc version can possibly be removed later, as it is slower and needs a larger artifact than the clang one.

          # --disallow-focus: fail if #[itest(focus)] is encountered, to prevent running only a few tests for full CI
          - name: linux-memcheck-gcc-4.0.3
            os: ubuntu-20.04
            artifact-name: linux-memcheck-gcc
            godot-binary: godot.linuxbsd.editor.dev.x86_64.san
            godot-args: -- --disallow-focus
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout

          - name: linux-memcheck-clang-4.0.3
            os: ubuntu-20.04
            artifact-name: linux-memcheck-clang
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            godot-args: -- --disallow-focus
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout

          - name: linux-memcheck-gcc-nightly
            os: ubuntu-20.04
            artifact-name: linux-memcheck-gcc
            godot-binary: godot.linuxbsd.editor.dev.x86_64.san
            godot-args: -- --disallow-focus
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout
            rust-extra-args: --features godot/custom-godot
            godot-prebuilt-patch: '4.1'

          - name: linux-memcheck-clang-nightly
            os: ubuntu-20.04
            artifact-name: linux-memcheck-clang
            godot-binary: godot.linuxbsd.editor.dev.x86_64.llvm.san
            godot-args: -- --disallow-focus
            rust-toolchain: nightly
            rust-env-rustflags: -Zrandomize-layout
            rust-extra-args: --features godot/custom-godot
            godot-prebuilt-patch: '4.1'


    steps:
      - uses: actions/checkout@v3

      - name: "Run Godot integration test"
        uses: ./.github/composite/godot-itest
        with:
          artifact-name: godot-${{ matrix.artifact-name || matrix.name }}
          godot-binary: ${{ matrix.godot-binary }}
          godot-args: ${{ matrix.godot-args }}
          godot-prebuilt-patch: ${{ matrix.godot-prebuilt-patch }}
          rust-extra-args: ${{ matrix.rust-extra-args }}
          rust-toolchain: ${{ matrix.rust-toolchain || 'stable' }}
          rust-env-rustflags: ${{ matrix.rust-env-rustflags }}
          with-llvm: ${{ matrix.with-llvm }}
          godot-check-header: ${{ matrix.godot-check-header }}


  license-guard:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: "Check license headers"
        uses: apache/skywalking-eyes/header@v0.4.0
        with:
          # log: debug # optional: set the log level. The default value is `info`.
          config: .github/external-config/licenserc.yml
          # token: # optional: the token that license eye uses when it needs to comment on the pull request.
          # Set to empty ("") to disable commenting on pull request. The default value is ${{ github.token }}
          # mode: # optional: Which mode License-Eye should be run in. Choices are `check` or `fix`. The default value is `check`.
          mode: check


  full-ci:
    if: github.event_name == 'push' && success()
    needs:
      - rustfmt
      - clippy
      - unit-test
      - godot-itest
      - license-guard
    runs-on: ubuntu-20.04
    steps:
      - name: "Mark the job as a success"
        run: exit 0
